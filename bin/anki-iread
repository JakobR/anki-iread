#!/usr/bin/env ruby

require 'bundler/setup'
require 'thor'
require 'anki-iread'

class AnkiIReadCLI < Thor
  class_option :verbose,
    type: :boolean,
    aliases: '-v',
    default: false,
    desc: "Print detailed output to STDERR"

  option :media_folder,
    type: :string,
    aliases: '-m',
    default: "~/Documents/Anki/User 1/collection.media",
    desc: "Specify the path to the Anki media folder"
  option :clipboard,
    type: :boolean,
    aliases: '-c',
    default: false,
    desc: "Copy the HTML output to the clipboard instead of printing it to the standard output"
  option :no_rollback,
    type: :boolean,
    default: false,
    desc: "By default, anki-iread will roll back changes if an error occurs. Specify this option to prevent it from doing that."
  desc 'get <url>', 'Loads the web page at <url>, puts the referenced images in the anki media folder and returns the HTML code with img sources adjusted for use in anki.'
  long_desc <<-LONGDESC
    `anki-iread get` will load the web page at the given URI.
    It should point to an HTML document.

    The programm will:
    \x5 1. Load all the images referenced by <img> tags
    \x5 2. Put the images in the anki media folder
    \x5 3. Adjust the 'src' attribute on <img> tags for Anki
    \x5 4. Load any referenced CSS stylesheets and
        include them directly in the HTML source code
        (either using data-uris or as included CSS)
    \x5 5. Print the adjusted HTML to standard output

    See the option descriptions above for further information.

    TODO: Examples.
  LONGDESC
  def get(uri)

    begin

      app = AnkiIRead::App.new(uri, options[:media_folder])

      app.logger = lambda do |message, verbose|
        $stderr.puts message unless verbose && !options[:verbose]
      end

      html_output = app.run

      if options[:clipboard]
        require 'clipboard'
        Clipboard.copy html_output
        $stderr.puts "Done. Output was written to clipboard."
      else
        $stdout.write html_output
      end

    rescue AnkiIRead::Error => e
      $stderr.puts "ERROR - #{e.class}: #{e.message}"
      app.rollback unless options[:no_rollback]
      exit 1
    end

  end
end

AnkiIReadCLI.start(ARGV)
